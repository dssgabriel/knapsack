#+TITLE:    Knapsack problem
#+AUTHOR:   Gabriel Dos Santos

** Introduction
The knapsack problem is a problem in combinatorial optimization: given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items. The problem often arises in resource allocation where the decision makers have to choose from a set of non-divisible projects or tasks under a fixed budget or time constraint, respectively.

** Description
In this implementation, the followings are defined:
- the number of packages,
- the maximum weight of each package,
- the maximum weight of a batch of packages.

An array of random integers (from 1 to the maximum weight per package) representing the packages is generated.
The goal is to fill each batch to its maximum weight with the highest amount of packages, in order to have the least amount of batches by the end.

Three algorithm that try to answer this problem have been implemented:
- the first one fills the batches with each value of the array, as they come.
- the second algorithm first sorts the array (using an implementation of the ~quicksort algorithm~), reverses it, and then starts filling the batches.
- the third algorithm optimizes the filling of each batch by first sorting the array, reversing it and using nested ~for~ loops to find complementary values.

** Installing and running
First, clone the repository:
#+BEGIN_SRC sh
git clone https://github.com/dssgabriel/knapsack.git
#+END_SRC

Then cd into the directory and compile:
#+BEGIN_SRC sh
cd knapsack
make
#+END_SRC

Finally, run with the values that you want (or use ~make run~ for a demo):
#+BEGIN_SRC sh
target/main $(NB_PACKAGES) $(MAX_PACKAGE_WEIGHT) $(MAX_BATCH_WEIGHT)
#+END_SRC

You can also use the provided debugging command ~make gdb~ and ~make vg~ to run with ~gdb~ and ~valgrind~ respectively.

** Possible optimizations
- implementing a different struct that does not allocate unused memory, instead of using matrices.
- ...
Any other ideas are welcomed.
